// src/index.ts
import fs from "fs";
import path from "path";
var NAME = "vite-plugin-custom-tsconfig";
var TSCONFIG_PATH = "tsconfig.json";
var BANNER = `// GENERATED BY ${NAME} 
`;
var DELETE_TIP = `Please delete it or remove ${NAME} from your Vite config`;
var resolveFromRoot = (root, file) => {
  return path.resolve(root, file);
};
var tsConfigHasBanner = (tsconfig) => {
  const tsconfigContent = fs.readFileSync(tsconfig, "utf8");
  return tsconfigContent.startsWith(BANNER.trim());
};
var customTsConfigPlugin = (options) => {
  let root;
  const resolvedOptions = {
    tsConfigPath: "tsconfig.build.json",
    keepTsConfig: false,
    ...options
  };
  return {
    name: NAME,
    config(config) {
      root ?? (root = config.root ?? process.cwd());
      const tsconfig = resolveFromRoot(root, TSCONFIG_PATH);
      if (fs.existsSync(tsconfig) && !tsConfigHasBanner(tsconfig)) {
        throw new Error(`${TSCONFIG_PATH} already exists. ${DELETE_TIP}`);
      }
      const customTsConfig = resolveFromRoot(
        root,
        resolvedOptions.tsConfigPath
      );
      if (!fs.existsSync(customTsConfig)) {
        throw new Error(`${resolvedOptions.tsConfigPath} does not exist.`);
      }
      const customTsConfigContent = fs.readFileSync(customTsConfig, "utf8");
      fs.writeFileSync(tsconfig, BANNER + customTsConfigContent);
    },
    closeBundle() {
      const tsconfig = resolveFromRoot(root, TSCONFIG_PATH);
      if (!fs.existsSync(tsconfig)) {
        return;
      }
      if (!tsConfigHasBanner(tsconfig)) {
        throw new Error(
          `${TSCONFIG_PATH} does not contain the expected banner. ${DELETE_TIP}`
        );
      }
      if (!resolvedOptions.keepTsConfig) {
        fs.rmSync(tsconfig);
      }
    }
  };
};
var src_default = customTsConfigPlugin;
export {
  src_default as default
};
