"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_fs = __toESM(require("fs"), 1);
var import_path = __toESM(require("path"), 1);
var NAME = "vite-plugin-custom-tsconfig";
var TSCONFIG_PATH = "tsconfig.json";
var BANNER = `// GENERATED BY ${NAME} 
`;
var DELETE_TIP = `Please delete it or remove ${NAME} from your Vite config`;
var resolveFromRoot = (root, file) => {
  return import_path.default.resolve(root, file);
};
var tsConfigHasBanner = (tsconfig) => {
  const tsconfigContent = import_fs.default.readFileSync(tsconfig, "utf8");
  return tsconfigContent.startsWith(BANNER.trim());
};
var customTsConfigPlugin = (options) => {
  let root;
  const resolvedOptions = {
    tsConfigPath: "tsconfig.build.json",
    keepTsConfig: false,
    ...options
  };
  return {
    name: NAME,
    config(config) {
      root ?? (root = config.root ?? process.cwd());
      const tsconfig = resolveFromRoot(root, TSCONFIG_PATH);
      if (import_fs.default.existsSync(tsconfig) && !tsConfigHasBanner(tsconfig)) {
        throw new Error(`${TSCONFIG_PATH} already exists. ${DELETE_TIP}`);
      }
      const customTsConfig = resolveFromRoot(
        root,
        resolvedOptions.tsConfigPath
      );
      if (!import_fs.default.existsSync(customTsConfig)) {
        throw new Error(`${resolvedOptions.tsConfigPath} does not exist.`);
      }
      const customTsConfigContent = import_fs.default.readFileSync(customTsConfig, "utf8");
      import_fs.default.writeFileSync(tsconfig, BANNER + customTsConfigContent);
    },
    closeBundle() {
      const tsconfig = resolveFromRoot(root, TSCONFIG_PATH);
      if (!import_fs.default.existsSync(tsconfig)) {
        return;
      }
      if (!tsConfigHasBanner(tsconfig)) {
        throw new Error(
          `${TSCONFIG_PATH} does not contain the expected banner. ${DELETE_TIP}`
        );
      }
      if (!resolvedOptions.keepTsConfig) {
        import_fs.default.rmSync(tsconfig);
      }
    }
  };
};
var src_default = customTsConfigPlugin;
module.exports = module.exports.default;
